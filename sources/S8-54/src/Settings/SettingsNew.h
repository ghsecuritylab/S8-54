#pragma once
#include "defines.h"
#include "SettingsTypes.h"
#include "Utils/Measures.h"
#include "Menu/MenuItems.h"


#pragma anon_unions

typedef union
{
    struct
    {
        // 
        int16               disp_TimeShowLevels;
        int16               disp_ShiftInMemory;
        int16               disp_TimeMessages;
        int16               disp_Brightness;
        int16               disp_BrightnessGrid;
        uint16              disp_colors[16];
        ModeDrawSignal      disp_ModeDrawSignal;
        TypeGrid            disp_TypeGrid;
        NumAccumulation     disp_NumAccumulation;
        NumAveraging        disp_NumAveraging;
        ModeAveraging       disp_ModeAveraging;
        NumMinMax           disp_NumMinMax;
        NumSmoothing        disp_NumSmoothing;
        NumSignalsInSec     disp_NumSignalsInSec;
        Channel             disp_lastAffectedChannel;
        ModeAccumulation    disp_ModeAccumulation;
        AltMarkers          disp_AltMarkers;
        MenuAutoHide        disp_MenuAutoHide;
        ShowStrNavi         disp_ShowStringNavigation;
        LinkingRShift       disp_LinkingRShift;
        Background          disp_Background;
        // Channels
        uint16          chan_RShiftRel[2];
        ModeCouple      chan_ModeCouple[2];
        Divider         chan_Divider[2];
        Range           chan_Range[2];
        bool            chan_Enable[2];
        bool            chan_Inverse[2];
        int8            chan_BalanceShiftADC[2];
        Bandwidth       chan_Bandwidth[2];
        Resistance      chan_Resistance[2];
        CalibrationMode chan_CalibrationMode[2];
        // Trig
        uint16          trig_LevelRel[3];
        uint16          trig_TimeDelay;
        StartMode       trig_StartMode;
        TrigSource      trig_Source;
        TrigPolarity    trig_Polarity;
        TrigInput       trig_Input;
        TrigModeFind    trig_ModeFind;
        // TBase
        TBase           time_TBase;
        int16           time_tShiftRel;
        FunctionTime    time_TimeDivXPos;
        TPos            time_TPos;
        SampleType      time_SampleType;
        SampleType      time_SampleTypeOld;
        PeackDetMode    time_PeackDet;
        // Курсоры
        CursCntrl       curs_CntrlU[NumChannels];
        CursCntrl       curs_CntrlT[NumChannels];
        Channel         curs_Source;
        float           curs_PosCurU[NumChannels][2];
        float           curs_PosCurT[NumChannels][2];
        float           curs_DeltaU100percents[2];
        float           curs_DeltaT100percents[2];
        CursMovement    curs_Movement;
        CursActive      curs_Active;
        CursLookMode    curs_LookMode;
        bool            curs_ShowFreq;
        bool            curs_ShowCursors;
        // Memory
#define MAX_SYMBOLS_IN_FILE_NAME 35
        NumPoinstFPGA   mem_FpgaNumPoints;
        ModeWork        mem_ModeWork;
        FileNamingMode  mem_FileNamingMode;
        char            mem_FileNameMask[MAX_SYMBOLS_IN_FILE_NAME];
        char            mem_FileName[MAX_SYMBOLS_IN_FILE_NAME];
        int8            mem_IndexCurSymbolNameMask;
        ModeShowIntMem  mem_ModeShowIntMem;
        bool            mem_FlashAutoConnect;
        ModeBtnMemory   mem_ModeBtnMemory;
        ModeSaveSignal  mem_ModeSaveSignal;
        // ИЗМЕРЕНИЯ
        MeasuresNumber  meas_number;
        Channel         meas_source;
        ModeViewSignals meas_ModeViewSignals;
        Measure         meas_measures[15];
        bool            meas_show;
        MeasuresZone    meas_Zone;
        int16           meas_PosCurU[2];
        int16           meas_PosCurT[2];
        CursCntrl       meas_CntrlU;
        CursCntrl       meas_CntrlT;
        CursActive      meas_CursActive;
        Measure         meas_Marked;
        // SettingsMath
        ScaleFFT        math_ScaleFFT;
        SourceFFT       math_SourceFFT;
        WindowFFT       math_WindowFFT;
        FFTmaxDB        math_FFTmaxDB;
        Function        math_Function;
        uint8           math_currentCursor;
        uint8           math_PosCur[2];
        int8            math_koeff1add;
        int8            math_koeff2add;
        int8            math_koeff1mul;
        int8            math_koeff2mul;
        bool            math_enableFFT;
        ModeDrawMath    math_ModeDraw;
        ModeRegSet      math_ModeRegSet;
        Range           math_Range;
        Divider         math_Divider;
        uint16          math_RShift;
        // Частотомер
        bool            freq_Enable;
        TimeCounting    freq_TimeCounting;
        FreqClc         freq_FreqClc;
        NumberPeriods   freq_NumberPeriods;
        // СЕРВИС
        int16               serv_SoundVolume;
        int16               serv_SpeedRShift;
        bool                serv_SoundEnable;
        bool                serv_Recorder;
        int8                serv_IPaddress;
        CalibrationMode     serv_Calibrator;
        ColorScheme         serv_ColorScheme;
        FunctionPressRShift serv_FuncRShift;
        // Ethernet
        uint8       eth_mac0;
        uint8       eth_mac1;
        uint8       eth_mac2;
        uint8       eth_mac3;
        uint8       eth_mac4;
        uint8       eth_mac5;
        uint8       eth_ip0;
        uint8       eth_ip1;
        uint8       eth_ip2;
        uint8       eth_ip3;
        uint16      eth_port;
        uint8       eth_mask0;
        uint8       eth_mask1;
        uint8       eth_mask2;
        uint8       eth_mask3;
        uint8       eth_gw0;
        uint8       eth_gw1;
        uint8       eth_gw2;
        uint8       eth_gw3;
        bool        eth_enable;
        // Common
        int         com_CountEnables;
        int         com_CountErasedFlashData;
        int         com_CountErasedFlashSettings;
        int         com_WorkingTimeInSecs;
        Language    com_Lang;
        // Debug
        bool        dbg_ShowRandInfo;
        bool        dbg_ShowRandStat;
        bool        dbg_ModeEMS;
        bool        dbg_ShowStats;
        bool        dbg_ModePauseConsole;
        int8        dbg_SizeFont;
        DisplayOrientation  dbg_Orientation;
        int16               dbg_NumStrings;
        int16               dbg_NumMeasuresForGates;
        int16               dbg_TimeCompensation;
        int16               dbg_AltShift;
        int16               dbg_Pretriggered;
        Bandwidth           dbg_Bandwidth[2];
        bool                dbg_show_all;
        bool                dbg_show_flag;
        bool                dbg_show_RShift[2];
        bool                dbg_show_TrigLev;
        bool                dbg_show_Range[2];
        bool                dbg_show_ChanParam[2];
        bool                dbg_show_TrigParam;
        bool                dbg_show_TShift;
        bool                dbg_show_TBase;
        // SettingsMenu
        int8                menu_PosActItem[Page_NumPages];
        int8                menu_CurrentSubPage[Page_NumPages];
        bool                menu_PageDebugActive;
        int8                menu_IsShown;
        // Настройки, которые задаются единожды при наладке на заводе
        int16               nrst_RShiftAdd[NumChannels][RangeSize][2];
        int16               nrst_CorrectionTime;
        int16               nrst_BalanceADC[NumChannels];
        int16               nrst_NumAveForRand;
        BalanceADCtype      nrst_BalanceADCtype;
        StretchADCtype      nrst_StretchADCtype;
        int16               nrst_StretchADC[NumChannels][3];
        int16               nrst_AddStretch20mV[NumChannels];
        int16               nrst_AddStretch50mV[NumChannels];
        int16               nrst_AddStretch100mV[NumChannels];
        int16               nrst_AddStretch2V[NumChannels];
        int16               nrst_NumSmoothForRand;
    };
    int _size_[256];
} SettingsNew;

extern SettingsNew setNew;

void SettingsNew_Init(void);
