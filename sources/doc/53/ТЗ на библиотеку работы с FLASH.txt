1. Инициализация:
    а. Аргументом ф-ция Init() принимает указатель на область памяти необходимого размера (размер оговаривается в документации)
    б. Ещё два аргумента - указатели на функции обратного вызова (*funcConnect)(void) и (*funcDisconnect)(void), которые будут вызываться при подключении и отключении флешки соответственно.
2. Функции:

    - int ПодключенныеДиски(char* str, int length), 
        str - указатель на строку длиной length символов, куда будет помещён список существующих дисков в виде "a\xff\b\xff" (перечислены диски, разделённые байтом 255, завершается нулём).
        Если возвращённое значение не равно нулю, оно означает необходимую длину строки.

    - int КоличествоЭлементов(char *cat)
        Возвращает количество элементов в каталоге cat. Если -1 - каталога не существует

    - int ЭлементКаталога(char* cat, int numElement, char *str, int length, int size, DataTime dataTime, int type),
        cat - каталог. Примеры: "a:\", "b:\dir\"
        numElement - номер элемента, который нужно получить
        str и lenght аналогично предыдущему
        Возвращает :
                   0 в случае успеха, 
                   -1, если каталог не существует, 
                   другое значение - необходимую длину строки
   
    - int УстановитьРабочийКаталог(char* cat)
        Возвращает:
            0 - всё в порядке
            -1 - каталога не существует
            -2 - ошибка

   - int СоздатьФайл(char* nameFile)
        -1 - ошибка

   - int УдалитьФайл(char* nameFile)

   - int Записать_В_Файл(char* nameFile, uint8 *data, int num)
         -1 - файла не существует
         -2 - ошибка
        
   - int Прочитать_Из_Файла(char* nameFile, int firstElem, int numElements, uint8 *data)
         -1 - файла не существует
         -2 - ошибка



// текущие мысли на тему: 

минимальная функциональность: 

	- автоматически mountvolume
	- aвтоматически unmountvolume
	- построение списка содержимого папки
	\- сортировка списка (по признаку DIR or FILE )
	 |- постраничная выдача списка (возможно отдать на обработку вовне)
	- создание файлов в указаной директории
	- создание директорий в указаной директории
	- открытие-просмотр файлов соответствующего формата
	\- GIF
	 |- CSV
	 |- BMP
        - удаление файлов

возможно, в последующих версиях будет наверное неплохо расширить
// пока что кажется, что файловые операции вроде

	- переименование файлов и директорий
	- копирование
	- перемещение
не факт, что уместны в приборе с таким интерфейсом

// текущие мысли на тему, иттерация номер два:

минимальная функциональность: 

	- вынесенная процедура инициализации как железа, так и программных библиотек
	
	- автоматически mountvolume
	- aвтоматически unmountvolume
	
	- <s>построение списка содержимого папки</s> 			//выдавать элементы списка по одному во внешнюю программу
	\- сортировка списка (по признаку DIR or FILE )				//и вообще, всю работу по этому вопросу отдеть вовне
	 |- постраничная выдача списка (возможно отдать на обработку вовне)
	 
	 
	- создание файлов в указаной директории
	- запись файла как массива данных 
	- создание директорий в указаной директории
	- чтение файлов как массива данных 
	
				вся эта ботва уходит во внешнюю программу	- открытие-просмотр файлов соответствующего формата
															\- GIF
															|- CSV
															|- BMP
	- удаление файлов 
	- удаление директорий (рекурсивность процедуры)
	
	
// вариант быстрого решения: сделать оболочки для следующих функций
// ok_ окей, вроде реализовано
// ok~ реализовано в упрощённом/временном виде, содержит TODO
// ~~ not need in it

	ok_		f_mount - calls automatically at enumeration finish		
	ok_		f_unmount - calls automatically, when detected device ejecting or manually
	
	ok_		block of:
			f_open
				f_read	- for reading block of data stored on flash		// fs_
			f_close			
		
	ok_		block  of:
			f_open		- for creating file
			f_close	
	
	ok_		block of:
			f_open
				f_write	- for writing data block to flash (slow, but ok method) 
			f_close
			
	~~f_opendir	- for directory listing
	
	ok_		block of:
			f_opendir
				f_readdir - for getting directory item (one item, by num) 
			f_closedir
	 
	ok_		f_mkdir		- for creating of new directory
	
	ok~		f_unlink  	- for removing directory or file 
	
	ok_		f_getcwd	- get current directory
	ok~		f_chdir 	- change current directory
	ok~		f_getfree	- getfreespace on volume
	
// external API here:

    - int ПодключенныеДиски()			/nope - монтирование-демонтирование полностью автоматическое, строго один раздел.
    - int УстановитьРабочийКаталог()	/	uint8_t uffs_chdir();
    - int КоличествоЭлементов()			/	uint8_t uffs_get_items_num();
    - int ЭлементКаталога()				/	uint8_t uffs_get_item();		// полностью возвращает FILINFO structure
	- int СоздатьФайл()					/	uint8_t uffs_fcreate();
										/	uint8_t uffs_fcreate();			// создаёт каталог
    - int УдалитьФайл()					/	uint8_t uffs_remove();			// удаляет как файл, так и пустую папку
	- int Записать_В_Файл()				/	uint8_t uffs_write();
	- int Прочитать_Из_Файла()			/	uint8_t uffs_read();

	
